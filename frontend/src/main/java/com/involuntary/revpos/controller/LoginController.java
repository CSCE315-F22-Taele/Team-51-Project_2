package com.involuntary.revpos.controller;

import com.involuntary.revpos.database.DatabaseConnection;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ResourceBundle;

public class LoginController implements Initializable {

    @FXML
    private Button loginButton;
    @FXML
    private TextField employeeUsernameField;
    private static TextField referEmployeeUsername;
    @FXML
    private PasswordField employeePasswordField;
    private static TextField referEmployeePassword;
    @FXML
    private Label loginMsgLabel;
    private static Label referLoginMsg;
    @FXML
    private Button managerLoginButton;
    private static Button referManagerLoginButton;

    /**
     * Executes the body when the FXML Controller is loaded
     *
     * @param url            represents the location of the fxml file
     * @param resourceBundle represents any resources utilized
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        try {
            loginButton.setDefaultButton(true);
            loginButton.setOnKeyPressed(event -> {
                if (event.getCode() == KeyCode.ENTER) {
                    verifyLogin(null);
                }
            });
        } catch (Exception e) {
        }
        try {
            managerLoginButton.setDefaultButton(true);
            managerLoginButton.setOnKeyPressed(event -> {
                if (event.getCode() == KeyCode.ENTER) {
                    verifyLogin(null);
                }
            });
        } catch (Exception e) {
        }
        LoginController.referEmployeeUsername = employeeUsernameField;
        LoginController.referEmployeePassword = employeePasswordField;
        LoginController.referLoginMsg = loginMsgLabel;
        LoginController.referManagerLoginButton = managerLoginButton;
    }

    /**
     * Verifies the credentials from the login screen, switching the scene if
     * successful.
     *
     * @param event represents the high-level event generated by a component
     *              (e.g. button)
     */
    public void verifyLogin(ActionEvent event) {
        Connection dbConnection = null;
        Statement statement = null;
        ResultSet queryResult = null;

        try {
            DatabaseConnection connectNow = new DatabaseConnection();
            dbConnection = connectNow.getConnection();
            if (dbConnection == null) {
                loginMsgLabel.setText("Failed to connect to database...");
                return;
            }

            String loginData =
                "SELECT count(1) FROM accounts WHERE username = '"
                    + employeeUsernameField.getText() + "' AND password = '"
                    + employeePasswordField.getText() + "'";
            statement = dbConnection.createStatement();
            queryResult = statement.executeQuery(loginData);

            while (queryResult.next()) {
                if (queryResult.getInt(1) == 1) {
                    loginMsgLabel.setText("Success! Logging in...");
                    Parent root = FXMLLoader.load(
                        getClass().getResource("/views/pos.fxml"));
                    Stage stage = (Stage) ((Node) event.getSource()).getScene()
                        .getWindow();
                    Scene scene = ((Node) event.getSource()).getScene();
                    scene.setRoot(root);
                    stage.setTitle("Revs American Grill [POS]");

                } else {
                    loginMsgLabel.setText("Invalid credentials, try again!");
                }
            }
        } catch (Exception error) {
            error.printStackTrace();
        } finally {
            try {
                if (queryResult != null) {
                    queryResult.close();
                }
            } catch (Exception e) {
            }
            ;
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (Exception e) {
            }
            ;
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }
            } catch (Exception e) {
            }
            ;
        }
    }

    /**
     * Calls on FXML to open another window for the manager to login
     *
     * @param posScene references the original scene to be passed on
     * @throws IOException
     */
    public static void openModal(Scene posScene) throws IOException {
        Parent root = FXMLLoader.load(
            PosController.class.getResource("/views/managerLogin.fxml"));
        Scene scene = new Scene(root);
        Stage modal = new Stage();
        modal.setScene(scene);
        modal.initModality(Modality.APPLICATION_MODAL);
        modal.setAlwaysOnTop(true);
        modal.setIconified(false);
        modal.setResizable(false);
        modal.setTitle("Manager Login");
        modal.getIcons().add(new Image(
            LoginController.class.getResourceAsStream("/images/box.png")));
        referManagerLoginButton.setOnAction(event -> {
            verifyManagerLogin(posScene);
        });
        modal.showAndWait();
    }

    /**
     * Queries the database to ensure the credentials enter are valid, switching
     * to the manager scene
     *
     * @param posScene references the original scene to be passed on
     */
    public static void verifyManagerLogin(Scene posScene) {
        Connection dbConnection = null;
        Statement statement = null;
        ResultSet queryResult = null;

        try {
            DatabaseConnection connectNow = new DatabaseConnection();
            dbConnection = connectNow.getConnection();
            if (dbConnection == null) {
                referLoginMsg.setText("Failed to connect to database...");
                return;
            }

            String loginData =
                "SELECT count(1) FROM accounts WHERE type = 'manager' AND username = '"
                    + referEmployeeUsername.getText() + "' AND password = '"
                    + referEmployeePassword.getText() + "'";
            statement = dbConnection.createStatement();
            queryResult = statement.executeQuery(loginData);

            while (queryResult.next()) {
                if (queryResult.getInt(1) == 1) {
                    Stage stage = (Stage) (referManagerLoginButton.getScene()
                        .getWindow());
                    stage.close();
                    Parent root = FXMLLoader.load(
                        PosController.class.getResource(
                            "/views/settings.fxml"));
                    posScene.setRoot(root);
                } else {
                    referLoginMsg.setText("Invalid credentials, try again!");
                }
            }
        } catch (Exception error) {
            error.printStackTrace();
        } finally {
            try {
                if (queryResult != null) {
                    queryResult.close();
                }
            } catch (Exception e) {
            }
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (Exception e) {
            }
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }
            } catch (Exception e) {
            }
        }
    }

}
